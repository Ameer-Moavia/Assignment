generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ORGANIZER
  PARTICIPANT
}

enum EventType {
  ONSITE
  ONLINE
}

enum AttachmentType {
  IMAGE
  VIDEO
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum OtpPurpose {
  LOGIN
  SIGNUP
  RESET
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String?
  role      Role     @default(PARTICIPANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizerProfile   OrganizerProfile?
  participantProfile ParticipantProfile?

  otps        OTP[]
  resetTokens PasswordResetToken[]
}

model UnverifiedUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(PARTICIPANT)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model OrganizerProfile {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  name   String

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event[]
}

model ParticipantProfile {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  name   String

  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  participations EventParticipant[]
}

model Event {
  id               Int       @id @default(autoincrement())
  title            String
  description      String
  type             EventType
  venue            String?
  joinLink         String?
  contactInfo      String?
  totalSeats       Int?
  requiresApproval Boolean   @default(false)
  joinQuestions    Json?
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime  @default(now())

  organizer   OrganizerProfile @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId Int

  attachments  Attachment[]
  participants EventParticipant[]
}

model Attachment {
  id        Int            @id @default(autoincrement())
  eventId   Int
  url       String
  type      AttachmentType
  publicId  String?
  createdAt DateTime       @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventParticipant {
  id            Int                 @id @default(autoincrement())
  eventId       Int
  participantId Int
  status        ParticipationStatus @default(CONFIRMED)
  answers       Json?
  joinedAt      DateTime            @default(now())

  event       Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant ParticipantProfile @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantId])
  @@index([eventId, status])
}

model OTP {
  id         Int        @id @default(autoincrement())
  userId     Int?
  email      String
  code       String
  purpose    OtpPurpose
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime   @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email, code])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
